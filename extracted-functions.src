####################
# Pretty sure this is the collection of self test message failures.
####################
[00575:01285]: jmp 708
[00576:01287]: jmp 731
[00577:01289]: out 110
[00578:01291]: out 111
[00579:01293]: out 32
[00580:01295]: out 99
[00581:01297]: out 97
[00582:01299]: out 108
[00583:01301]: out 108
[00584:01303]: out 32
[00585:01305]: out 111
[00586:01307]: out 112
[00587:01309]: out 10
[00588:01311]: halt
[00589:01312]: out 110
[00590:01314]: out 111
[00591:01316]: out 32
[00592:01318]: out 109
[00593:01320]: out 111
[00594:01322]: out 100
[00595:01324]: out 117
[00596:01326]: out 108
[00597:01328]: out 111
[00598:01330]: out 32
[00599:01332]: out 109
[00600:01334]: out 97
[00601:01336]: out 116
[00602:01338]: out 104
[00603:01340]: out 32
[00604:01342]: out 100
[00605:01344]: out 117
[00606:01346]: out 114
[00607:01348]: out 105
[00608:01350]: out 110
[00609:01352]: out 103
[00610:01354]: out 32
[00611:01356]: out 97
[00612:01358]: out 100
[00613:01360]: out 100
[00614:01362]: out 32
[00615:01364]: out 111
[00616:01366]: out 114
[00617:01368]: out 32
[00618:01370]: out 109
[00619:01372]: out 117
[00620:01374]: out 108
[00621:01376]: out 116
[00622:01378]: out 10
[00623:01380]: halt
[00624:01381]: out 110
[00625:01383]: out 111
[00626:01385]: out 116
[00627:01387]: out 32
[00628:01389]: out 104
[00629:01391]: out 105
[00630:01393]: out 116
[00631:01395]: out 99
[00632:01397]: out 104
[00633:01399]: out 104
[00634:01401]: out 105
[00635:01403]: out 107
[00636:01405]: out 105
[00637:01407]: out 110
[00638:01409]: out 103
[00639:01411]: out 10
[00640:01413]: halt
[00641:01414]: out 110
[00642:01416]: out 111
[00643:01418]: out 32
[00644:01420]: out 109
[00645:01422]: out 117
[00646:01424]: out 108
[00647:01426]: out 116
[00648:01428]: out 32
[00649:01430]: out 111
[00650:01432]: out 112
[00651:01434]: out 10
[00652:01436]: halt
[00653:01437]: out 110
[00654:01439]: out 111
[00655:01441]: out 32
[00656:01443]: out 109
[00657:01445]: out 111
[00658:01447]: out 100
[00659:01449]: out 32
[00660:01451]: out 111
[00661:01453]: out 112
[00662:01455]: out 10
[00663:01457]: halt
####################
# F1458
#
# Compares two sections of memory to see if they're equal. (Most likely the input checker)
#
# PARAM @0: Memory address to read from
# PARAM @1: Function to call
# PARAM @2: ???
#
# RETURN: @1, @2, @7
# @1 is 1 IF @1 is <= 32768
# @2 ???
# @7 ???
####################
[00664:01458]: push @0
[00665:01460]: push @3
[00666:01462]: push @4
[00667:01464]: push @5
[00668:01466]: push @6
[00669:01468]: set @6, @0
[00670:01471]: set @5, @1
[00671:01474]: rmem @4, @0          # read length of string from @0
[00672:01477]: set @1, 0
[00673:01480]: add @3, 1, @1        # set @3 to be @1 + 1
[00674:01484]: gt @0, @3, @4        # Check if @3 is greater than the length of the string (@1 is offset value)
[00675:01488]: jt @0, 1507          # If we've iterated passed the lengh of the string (PARAM @0) quit the loop
[00676:01491]: add @3, @3, @6       # Set @3 to be the offset in the string
[00677:01495]: rmem @0, @3          # Read a character from the string into memory based on (@0 + N)
[00678:01498]: call @5              #
[00679:01500]: add @1, @1, 1        #
[00680:01504]: jt @1, 1480          #
[00681:01507]: pop @6
[00682:01509]: pop @5
[00683:01511]: pop @4
[00684:01513]: pop @3
[00685:01515]: pop @0
[00686:01517]: ret
####################
# F1723
#
# This is the decryption method, it starts from [6068] and runs till 30050 decrypting all of the memory
#
####################
[00773:01723]: push @0
[00774:01725]: push @1
[00775:01727]: set @1, 6068
[00776:01730]: rmem @0, @1         # read from [6068] (= 11)
[00777:01733]: push @1             # save 6068, 84
[00778:01735]: mult @1, @1, @1     # @1 = 6068**2 = 22160
[00779:01739]: call 2125           # @0 = F2125([6068], 22160) = 22171
[00780:01741]: set @1, 16724
[00781:01744]: call 2125           # @0 = F2125(F2124([6068], 22160), 16724) = 11
[00782:01746]: pop @1              # @1 = 6068, 84
[00783:01748]: wmem @1, @0         # [6068] = F2125(11, 6068) = 6069,
[00784:01751]: add @1, @1, 1       # @1 = 6069
[00785:01755]: eq @0, 30050, @1    # @0 = 30050 == 6069
[00786:01759]: jf @0, 1730
[00787:01762]: pop @1
[00788:01764]: pop @0
[00789:01766]: ret
####################
# F2125
#
# Flips bit @0 of the value @1
#
# PARAM @0: The bit to flip (1 thru 16)
# PARAM @1: The value to have the bit flipped
#
# RETURN @0, @3, @4, @5, @6, @7
# @0 = (@0 | @1) & ~(@0 & @1)
####################
[00916:02125]: push @1
[00917:02127]: push @2
[00918:02129]: and @2, @0, @1
[00919:02133]: not @2, @2
[00920:02136]: or @0, @0, @1
[00921:02140]: and @0, @0, @2
[00922:02144]: pop @2
[00923:02146]: pop @1
[00924:02148]: ret
####################
# F1543
#
# 1. Read from @0 if it's false jump to [1563] then call F1458.
# 2. If the result of F1458 is true jump to [1563]
#
# PARAM @0: The memory address to read from
# PARAM @2:
#
# RETURN @0, @2, @4, @5, @6, @7
####################
[00700:01543]: push @1
[00701:01545]: push @3
[00702:01547]: rmem @3, @0
[00703:01550]: jf @3, 1563         # set @0 = 32767
[00704:01553]: call 1458           # Calls @1 after reading memory from @0
[00705:01555]: jt @1, 1563         # set @0 = 32767
[00706:01558]: set @0, @2          # why do this if you're just going to reset it two steps down?
[00707:01561]: jmp 1566            # pop @3 then @1
[00708:01563]: set @0, 32767
[00709:01566]: pop @3
[00710:01568]: pop @1
[00711:01570]: ret
####################
# F1667
#
# PARAM @0: Read from memory address
# PARAM @1: Read from memory address
#
# RETURN: @0, @5, @6, @7
#
####################
[00751:01667]: push @1
[00752:01669]: push @2
[00753:01671]: push @3
[00754:01673]: push @4
[00755:01675]: rmem @3, @0
[00756:01678]: rmem @4, @1
[00757:01681]: eq @2, @3, @4         # Check if [@3] is equal to [@4]
[00758:01685]: jf @2, 1711           # if they're not jump to 1711
[00759:01688]: or @2, @3, @4
[00760:01692]: jf @2, 1706           # if @3 and @4 are zero jump to 1706
[00761:01695]: set @2, @1
[00762:01698]: set @1, 1619
[00763:01701]: call 1458             # F1458(@0=???, @1=1619, @2=@1)
[00764:01703]: jf @1, 1711
[00765:01706]: set @0, 1             # set @0 = 1
[00766:01709]: jmp 1714
[00767:01711]: set @0, 0             # Probably say things went badly
[00768:01714]: pop @4
[00769:01716]: pop @3
[00770:01718]: pop @2
[00771:01720]: pop @1
[00772:01722]: ret
####################
# F2964
#
# PARAM @0: Memory address to read from
#
# RETURN:
####################
[01483:02964]: push @0
[01484:02966]: push @1
[01485:02968]: push @2
[01486:02970]: rmem @1, @0
[01487:02973]: jf @1, 3032
[01488:02976]: call 5921
[01489:02978]: jf @0, 3006
[01490:02981]: push @0
[01491:02983]: call 5990
[01492:02985]: set @1, @0
[01493:02988]: pop @0
[01494:02990]: jf @1, 3006
[01495:02993]: add @1, @0, 1
[01496:02997]: rmem @0, @1
[01497:03000]: call 1518
[01498:03002]: out 10
[01499:03004]: jmp 3238
[01500:03006]: push @0
[01501:03008]: push @1
[01502:03010]: push @2
[01503:03012]: set @0, 27432
[01504:03015]: set @1, 1531
[01505:03018]: add @2, 7903, 1813
[01506:03022]: call 1458
[01507:03024]: pop @2
[01508:03026]: pop @1
[01509:03028]: pop @0
[01510:03030]: jmp 3238
[01511:03032]: rmem @0, 2732
[01512:03035]: push @0
[01513:03037]: out 61
[01514:03039]: out 61
[01515:03041]: out 32
[01516:03043]: add @0, @0, 0
[01517:03047]: rmem @0, @0
[01518:03050]: call 1518
[01519:03052]: out 32
[01520:03054]: out 61
[01521:03056]: out 61
[01522:03058]: out 10
[01523:03060]: pop @0
[01524:03062]: push @0
[01525:03064]: add @0, @0, 1
[01526:03068]: rmem @0, @0
[01527:03071]: rmem @1, @0
[01528:03074]: eq @1, @1, 2
[01529:03078]: jf @1, 3104
[01530:03081]: push @0
[01531:03083]: set @0, 2680
[01532:03086]: call 5990
[01533:03088]: set @1, @0
[01534:03091]: pop @0
[01535:03093]: add @0, @0, 1
[01536:03097]: add @0, @0, @1
[01537:03101]: rmem @0, @0
[01538:03104]: call 1518
[01539:03106]: out 10
[01540:03108]: pop @0
[01541:03110]: push @0
[01542:03112]: call 5823
[01543:03114]: jf @0, 3146
[01544:03117]: push @0
[01545:03119]: push @1
[01546:03121]: push @2
[01547:03123]: set @0, 27455
[01548:03126]: set @1, 1531
[01549:03129]: add @2, 602, 4118
[01550:03133]: call 1458
[01551:03135]: pop @2
[01552:03137]: pop @1
[01553:03139]: pop @0
[01554:03141]: rmem @2, 2732
[01555:03144]: call 5876
[01556:03146]: pop @0
[01557:03148]: push @0
[01558:03150]: add @0, @0, 2
[01559:03154]: rmem @0, @0
[01560:03157]: rmem @0, @0
[01561:03160]: eq @2, @0, 1
[01562:03164]: out 10
[01563:03166]: out 84
[01564:03168]: out 104
[01565:03170]: out 101
[01566:03172]: out 114
[01567:03174]: out 101
[01568:03176]: out 32
[01569:03178]: jt @2, 3189
[01570:03181]: out 97
[01571:03183]: out 114
[01572:03185]: out 101
[01573:03187]: jmp 3193
[01574:03189]: out 105
[01575:03191]: out 115
[01576:03193]: out 32
[01577:03195]: call 2001
[01578:03197]: out 32
[01579:03199]: out 101
[01580:03201]: out 120
[01581:03203]: out 105
[01582:03205]: out 116
[01583:03207]: eq @2, @0, 1
[01584:03211]: jt @2, 3216
[01585:03214]: out 115
[01586:03216]: out 58
[01587:03218]: out 10
[01588:03220]: pop @0
[01589:03222]: push @0
[01590:03224]: add @0, @0, 2
[01591:03228]: rmem @0, @0
[01592:03231]: set @1, 5814
[01593:03234]: call 1458
[01594:03236]: pop @0
[01595:03238]: pop @2
[01596:03240]: pop @1
[01597:03242]: pop @0
[01598:03244]: ret
####################
# F1767
#
# PARAM @0:
# PARAM @1:
#
# RETURN: @1, @6, @7
#
####################
[00790:01767]: push @0
[00791:01769]: push @2
[00792:01771]: push @3
[00793:01773]: push @4
[00794:01775]: push @5
[00795:01777]: add @2, @1, @0      # @2 = @1 + @0
[00796:01781]: set @0, @1
[00797:01784]: set @5, 0
[00798:01787]: add @0, @0, 1       # @0 = @0 + 1
[00799:01791]: gt @3, @0, @2       # @3 = @0 > @2
[00800:01795]: jt @3, 1816
[00801:01798]: in @4
[00802:01800]: eq @3, @4, 10       # check if the character read from buffer is a new line
[00803:01804]: jt @3, 1816         # if it is jump to 1816
[00804:01807]: wmem @0, @4        
[00805:01810]: add @5, @5, 1
[00806:01814]: jmp 1787
[00807:01816]: wmem @1, @5
[00808:01819]: eq @3, @4, 10
[00809:01823]: jt @3, 1830
[00810:01826]: in @4
[00811:01828]: jmp 1819
[00812:01830]: pop @5
[00813:01832]: pop @4
[00814:01834]: pop @3
[00815:01836]: pop @2
[00816:01838]: pop @0
[00817:01840]: ret
####################
[00712:01571]: push @1
[00713:01573]: push @2
[00714:01575]: set @2, @1
[00715:01578]: set @1, 1605
[00716:01581]: call 1543
[00717:01583]: pop @2
[00718:01585]: pop @1
[00719:01587]: ret
####################
[00720:01588]: push @1
[00721:01590]: push @2
[00722:01592]: set @2, @1
[00723:01595]: set @1, 1648
[00724:01598]: call 1543
[00725:01600]: pop @2
[00726:01602]: pop @1
[00727:01604]: ret
####################
# F5921
#
# PARAM @0:
#
# RETURN: @0, @3, @4, @5, @6, @7
####################
[02691:05921]: push @1
[02692:05923]: push @2
[02693:05925]: set @2, @0
[02694:05928]: set @0, 27381
[02695:05931]: set @1, 5964
[02696:05934]: call 1543
[02697:05936]: eq @1, @0, 32767
[02698:05940]: jt @1, 5956
[02699:05943]: add @1, 27381, @0
[02700:05947]: add @1, @1, 1
[02701:05951]: rmem @0, @1
[02702:05954]: jmp 5959
[02703:05956]: set @0, 0
[02704:05959]: pop @2
[02705:05961]: pop @1
[02706:05963]: ret
####################
[02717:05990]: push @1
[02718:05992]: push @2
[02719:05994]: add @0, @0, 2
[02720:05998]: rmem @0, @0
[02721:06001]: jf @0, 6019
[02722:06004]: rmem @1, 2732
[02723:06007]: eq @1, @0, @1
[02724:06011]: jt @1, 6019
[02725:06014]: set @0, 0
[02726:06017]: jmp 6022
[02727:06019]: set @0, 1
[02728:06022]: pop @2
[02729:06024]: pop @1
[02730:06026]: ret
####################
[02652:05823]: push @1
[02653:05825]: push @2
[02654:05827]: set @0, 27381
[02655:05830]: set @1, 5846
[02656:05833]: set @2, 0
[02657:05836]: call 1458
[02658:05838]: set @0, @2
[02659:05841]: pop @2
[02660:05843]: pop @1
[02661:05845]: ret
####################
[02673:05876]: push @0
[02674:05878]: push @1
[02675:05880]: set @0, 27381
[02676:05883]: set @1, 5893
[02677:05886]: call 1458
[02678:05888]: pop @1
[02679:05890]: pop @0
[02680:05892]: ret
####################
[00872:02001]: push @0
[00873:02003]: push @1
[00874:02005]: push @2
[00875:02007]: push @3
[00876:02009]: push @4
[00877:02011]: push @5
[00878:02013]: set @2, 1
[00879:02016]: set @5, 0
[00880:02019]: jf @0, 2092
[00881:02022]: eq @4, @2, 10000
[00882:02026]: set @3, @0
[00883:02029]: jt @4, 2040
[00884:02032]: mult @1, @2, 10
[00885:02036]: mod @3, @0, @1
[00886:02040]: set @4, 0
[00887:02043]: mult @2, @2, 32767
[00888:02047]: jf @3, 2060
[00889:02050]: add @4, @4, 1
[00890:02054]: add @3, @3, @2
[00891:02058]: jmp 2047
[00892:02060]: mult @2, @2, 32767
[00893:02064]: mult @3, @4, @2
[00894:02068]: mult @3, @3, 32767
[00895:02072]: add @0, @0, @3
[00896:02076]: add @4, @4, 48
[00897:02080]: mult @2, @2, 10
[00898:02084]: add @5, @5, 1
[00899:02088]: push @4
[00900:02090]: jmp 2019
[00901:02092]: jt @5, 2099
[00902:02095]: out 48
[00903:02097]: jmp 2112
[00904:02099]: jf @5, 2112
[00905:02102]: pop @0
[00906:02104]: out @0
[00907:02106]: add @5, @5, 32767
[00908:02110]: jmp 2099
[00909:02112]: pop @5
[00910:02114]: pop @4
[00911:02116]: pop @3
[00912:02118]: pop @2
[00913:02120]: pop @1
[00914:02122]: pop @0
[00915:02124]: ret
####################
[01796:03727]: push @1
[01797:03729]: rmem @1, 3726
[01798:03732]: or @1, @1, @0
[01799:03736]: wmem 3726, @1
[01800:03739]: pop @1
[01801:03741]: ret
####################
[02028:04218]: push @0
[02029:04220]: push @1
[02030:04222]: push @2
[02031:04224]: add @2, 2716, 2
[02032:04228]: rmem @2, @2
[02033:04231]: jt @2, 4272
[02034:04234]: call 4405
[02035:04236]: wmem 3951, @0
[02036:04239]: add @1, @0, 3945
[02037:04243]: rmem @1, @1
[02038:04246]: set @0, 26024
[02039:04249]: call 1518
[02040:04251]: set @0, @1
[02041:04254]: call 1518
[02042:04256]: set @0, 26088
[02043:04259]: call 1518
[02044:04261]: set @0, @1
[02045:04264]: call 1518
[02046:04266]: out 46
[02047:04268]: out 10
[02048:04270]: out 10
[02049:04272]: pop @2
[02050:04274]: pop @1
[02051:04276]: pop @0
[02052:04278]: ret
####################
[02053:04279]: push @0
[02054:04281]: push @1
[02055:04283]: push @2
[02056:04285]: add @2, 2716, 2
[02057:04289]: rmem @2, @2
[02058:04292]: jt @2, 4398
[02059:04295]: call 4405
[02060:04297]: push @0
[02061:04299]: rmem @0, 3951
[02062:04302]: add @1, @0, 3945
[02063:04306]: rmem @1, @1
[02064:04309]: set @0, 26122
[02065:04312]: call 1518
[02066:04314]: set @0, @1
[02067:04317]: call 1518
[02068:04319]: set @0, 26170
[02069:04322]: call 1518
[02070:04324]: pop @0
[02071:04326]: set @1, @0
[02072:04329]: rmem @0, 3952
[02073:04332]: rmem @2, 3951
[02074:04335]: add @2, @2, 3948
[02075:04339]: rmem @2, @2
[02076:04342]: call @2
[02077:04344]: jt @1, 4391
[02078:04347]: rmem @1, 3952
[02079:04350]: wmem 3952, @0
[02080:04353]: gt @2, @0, @1
[02081:04357]: jf @2, 4369
[02082:04360]: push @0
[02083:04362]: set @0, 26235
[02084:04365]: call 1518
[02085:04367]: pop @0
[02086:04369]: gt @2, @1, @0
[02087:04373]: jf @2, 4385
[02088:04376]: push @0
[02089:04378]: set @0, 26267
[02090:04381]: call 1518
[02091:04383]: pop @0
[02092:04385]: out 10
[02093:04387]: out 10
[02094:04389]: jmp 4398
[02095:04391]: call 4660
[02096:04393]: set @0, 26299
[02097:04396]: call 1518
[02098:04398]: pop @2
[02099:04400]: pop @1
[02100:04402]: pop @0
[02101:04404]: ret
####################
[02150:04533]: push @0
[02151:04535]: add @0, 2716, 2
[02152:04539]: rmem @0, @0
[02153:04542]: jt @0, 4608
[02154:04545]: set @0, 26321
[02155:04548]: call 1518
[02156:04550]: rmem @0, 3952
[02157:04553]: eq @0, @0, 30
[02158:04557]: jt @0, 4574
[02159:04560]: set @0, 26354
[02160:04563]: call 1518
[02161:04565]: set @0, 26398
[02162:04568]: call 1518
[02163:04570]: call 4660
[02164:04572]: jmp 4608
[02165:04574]: set @0, 26440
[02166:04577]: call 1518
[02167:04579]: rmem @0, 3954
[02168:04582]: add @0, @0, 1
[02169:04586]: jt @0, 4596
[02170:04589]: set @0, 26484
[02171:04592]: call 1518
[02172:04594]: jmp 4565
[02173:04596]: set @0, 26584
[02174:04599]: call 1518
[02175:04601]: add @0, 2716, 2
[02176:04605]: wmem @0, 32767
[02177:04608]: pop @0
[02178:04610]: ret
####################
[02179:04611]: push @0
[02180:04613]: add @0, 2716, 2
[02181:04617]: rmem @0, @0
[02182:04620]: jt @0, 4657
[02183:04623]: set @0, 26717
[02184:04626]: call 1518
[02185:04628]: rmem @0, 2732
[02186:04631]: eq @0, @0, 2623
[02187:04635]: jt @0, 4645
[02188:04638]: set @0, 26725
[02189:04641]: call 1518
[02190:04643]: jmp 4650
[02191:04645]: set @0, 26731
[02192:04648]: call 1518
[02193:04650]: set @0, 26737
[02194:04653]: call 1518
[02195:04655]: call 4660
[02196:04657]: pop @0
[02197:04659]: ret
####################
[02102:04405]: push @0
[02103:04407]: push @1
[02104:04409]: push @2
[02105:04411]: push @3
[02106:04413]: push @4
[02107:04415]: push @5
[02108:04417]: rmem @5, 3953
[02109:04420]: gt @3, @5, 29999
[02110:04424]: jt @3, 4434
[02111:04427]: add @5, @5, 1
[02112:04431]: wmem 3953, @5
[02113:04434]: set @3, @0
[02114:04437]: set @4, @1
[02115:04440]: add @0, @5, 2
[02116:04444]: call 2281
[02117:04446]: rmem @1, 3954
[02118:04449]: or @0, @1, @0
[02119:04453]: set @1, @4
[02120:04456]: call 2248
[02121:04458]: wmem 3954, @0
[02122:04461]: set @0, 3955
[02123:04464]: add @1, @5, 2
[02124:04468]: set @2, @4
[02125:04471]: call 4515
[02126:04473]: set @0, 3956
[02127:04476]: mult @1, @5, @5
[02128:04480]: mult @2, @4, @4
[02129:04484]: call 4515
[02130:04486]: set @0, 3957
[02131:04489]: set @1, 13
[02132:04492]: mult @2, @3, 9
[02133:04496]: mult @2, @2, @2
[02134:04500]: call 4515
[02135:04502]: pop @5
[02136:04504]: pop @4
[02137:04506]: pop @3
[02138:04508]: pop @2
[02139:04510]: pop @1
[02140:04512]: pop @0
[02141:04514]: ret
####################
[02198:04660]: push @0
[02199:04662]: wmem 3952, 22
[02200:04665]: wmem 3953, 0
[02201:04668]: wmem 3954, 0
[02202:04671]: wmem 3955, 0
[02203:04674]: wmem 3956, 0
[02204:04677]: wmem 3957, 0
[02205:04680]: add @0, 2716, 2
[02206:04684]: wmem @0, 2623
[02207:04687]: pop @0
[02208:04689]: ret
####################
[00972:02281]: push @1
[00973:02283]: gt @1, @0, 14
[00974:02287]: jt @1, 2309
[00975:02290]: set @1, @0
[00976:02293]: set @0, 1
[00977:02296]: jf @1, 2312
[00978:02299]: add @1, @1, 32767
[00979:02303]: mult @0, @0, 2
[00980:02307]: jmp 2296
[00981:02309]: set @0, 32767
[00982:02312]: pop @1
[00983:02314]: ret
####################
[00960:02248]: push @1
[00961:02250]: push @2
[00962:02252]: jf @1, 2276
[00963:02255]: add @1, @1, 32767
[00964:02259]: and @2, @0, 16384
[00965:02263]: mult @0, @0, 2
[00966:02267]: jf @2, 2252
[00967:02270]: or @0, @0, 1
[00968:02274]: jmp 2252
[00969:02276]: pop @2
[00970:02278]: pop @1
[00971:02280]: ret
####################
[02142:04515]: push @0
[02143:04517]: rmem @0, @0
[02144:04520]: call 2248
[02145:04522]: set @1, @2
[02146:04525]: call 2125
[02147:04527]: pop @1
[02148:04529]: wmem @1, @0
[02149:04532]: ret
####################
# F4977
#
# PARAM @
####################
[02323:04977]: push @2
[02324:04979]: push @3
[02325:04981]: rmem @2, 2732         # @2 = [2732]
[02326:04984]: eq @2, @2, 2457       # @2 = [2732] == 2457
[02327:04988]: jt @2, 5017           # if [2732] == 2457 jump to 5017
[02328:04991]: push @0               # [..., @0]
[02329:04993]: push @1               # [..., @0, @1]
[02330:04995]: push @2               # [..., @0, @1, @2]
[02331:04997]: set @0, 28621
[02332:05000]: set @1, 1531
[02333:05003]: add @2, 2591, 9793    # @2 = 12384
[02334:05007]: call 1458             # Read from 28621, call F1531 XXX
[02335:05009]: pop @2
[02336:05011]: pop @1
[02337:05013]: pop @0
[02338:05015]: jmp 5336
[02339:05017]: add @2, @0, 2         # @2 = @0 + 2
[02340:05021]: wmem @2, 32767        # [32767] = @2
[02341:05024]: rmem @2, 2462         # @2 = 2462
[02342:05027]: add @2, @2, 27095     # @2 = @2 + 27095
[02343:05031]: add @2, @2, 1         # @2 = @2 + 1
[02344:05035]: rmem @2, @2           # @2 = [@2]
[02345:05038]: add @3, 2457, 1       # @3 = 2458
[02346:05042]: rmem @3, @3           # @3 = [2458]
[02347:05045]: add @3, @3, @2        # @3 = [2458] + [@2]
[02348:05049]: add @2, @1, 48        # @2 = @1 + 48
[02349:05053]: wmem @3, @2           # [@3] = @2
[02350:05056]: rmem @2, 2462         # @2 = [2462]
[02351:05059]: add @2, @2, 27101     # @2 = [2462] + 27101
[02352:05063]: add @2, @2, 1         # @2 = @2 + 1
[02353:05067]: wmem @2, @1           # [@2] = @1
[02354:05070]: push @0
[02355:05072]: push @0
[02356:05074]: push @1
[02357:05076]: push @2
[02358:05078]: set @0, 28664         # @0 = 28664
[02359:05081]: set @1, 1531          # @1 = 1531
[02360:05084]: add @2, 10098, 22520  # @2 = 32618
[02361:05088]: call 1458             # check the string at [28664] jump to [1531]
[02362:05090]: pop @2
[02363:05092]: pop @1
[02364:05094]: pop @0
[02365:05096]: pop @0
[02366:05098]: push @0
[02367:05100]: add @2, @0, 0
[02368:05104]: rmem @0, @2
[02369:05107]: call 1518
[02370:05109]: pop @0
[02371:05111]: push @0
[02372:05113]: push @0
[02373:05115]: push @1
[02374:05117]: push @2
[02375:05119]: set @0, 28679
[02376:05122]: set @1, 1531
[02377:05125]: add @2, 3966, 26724
[02378:05129]: call 1458
[02379:05131]: pop @2                #
[02380:05133]: pop @1
[02381:05135]: pop @0
[02382:05137]: pop @0
[02383:05139]: rmem @2, 2462         # @2 = [2462]
[02384:05142]: add @2, @2, 1         # @2 = [2462] + 1
[02385:05146]: wmem 2462, @2         # [2462] = [2462] + 1
[02386:05149]: rmem @3, 27101        # @3 = [27101]
[02387:05152]: eq @3, @2, @3         # @3 = ([2462] + 1) == [27101]
[02388:05156]: jf @3, 5336           # if @3 is FALSE jump to 5336
[02389:05159]: set @0, 0             # @0 = 0
[02390:05162]: add @1, 27101, 1      # @1 = 27102
[02391:05166]: rmem @1, @1           # @1 = [27102]
[02392:05169]: add @0, @0, @1        # @0 = 0 + [27102]
[02393:05173]: add @1, 27101, 2      # @1 = (27101 + 2) = 27103
[02394:05177]: rmem @1, @1           # @1 = [27103]
[02395:05180]: add @2, 27101, 3      # @2 = 27101 + 3 = 27104
[02396:05184]: rmem @2, @2           # @2 = [27104]
[02397:05187]: mult @2, @2, @2       # @2 = [27104] * [27104]
[02398:05191]: mult @1, @1, @2       # @1 = [27103] * ([27104] * [27104])
[02399:05195]: add @0, @0, @1        # @0 = [27102] + ([27103] * ([27104] * [27104]))
[02400:05199]: add @1, 27101, 4      # @1 = 27101 + 4 = 27105
[02401:05203]: rmem @1, @1           # @1 = [27105]
[02402:05206]: mult @2, @1, @1       # @2 = [27105] * [27105]
[02403:05210]: mult @2, @2, @1       # @2 = ([27105] * [27105]) * [27105]
[02404:05214]: add @0, @0, @2        # @0 = ([27102] + ([27103] * ([27104] * [27104]))) + (([27105] * [27105]) * [27105])
[02405:05218]: add @1, 27101, 5      # @1 = 27101 + 5 = 27106
[02406:05222]: rmem @1, @1           # @1 = [27106]
[02407:05225]: mult @1, @1, 32767    # @1 = [27106] * 32767
[02408:05229]: add @0, @0, @1        # @0 = ([27102] + ([27103] * ([27104] * [27104]))) + (([27105] * [27105]) * [27105]) + ([27106] * 32767)
[02409:05233]: eq @1, @0, 399        # @1 = @0 == 399
[02410:05237]: jt @1, 5312           # If @0 is equal to 399 jump to 5312
[02411:05240]: add @2, 2688, 2       # @2 = 2670
[02412:05244]: wmem @2, 2457         # [2670] = 2457
[02413:05247]: add @2, 2692, 2       # @2 = 2694
[02414:05251]: wmem @2, 2457         # [2694] = 2457
[02415:05254]: add @2, 2696, 2       # @2 = 2698
[02416:05258]: wmem @2, 2457         # [2698] = 2457
[02417:05261]: add @2, 2700, 2       # @2 = 2702
[02418:05265]: wmem @2, 2457         # [2702] = 2457
[02419:05268]: add @2, 2704, 2       # @2 = 2706
[02420:05272]: wmem @2, 2457         # [2706] = 2457
[02421:05275]: wmem 2462, 0          # [2462] = 0
[02422:05278]: set @0, 27095         # @0 = 27095
[02423:05281]: set @1, 5341          # @1 = 5341
[02424:05284]: call 1458
[02425:05286]: push @0
[02426:05288]: push @1
[02427:05290]: push @2
[02428:05292]: set @0, 28710         # @0 = 28710
[02429:05295]: set @1, 1531          # @1 = 1531
[02430:05298]: add @2, 3223, 2140    # @2 = 5363
[02431:05302]: call 1458
[02432:05304]: pop @2
[02433:05306]: pop @1
[02434:05308]: pop @0
[02435:05310]: jmp 5336
[02436:05312]: push @0
[02437:05314]: push @1
[02438:05316]: push @2
[02439:05318]: set @0, 28777        # @0 = 28777
[02440:05321]: set @1, 1531         # @1 = 1531
[02441:05324]: add @2, 6938, 12231  # @2 = 19169
[02442:05328]: call 1458
[02443:05330]: pop @2
[02444:05332]: pop @1
[02445:05334]: pop @0
[02446:05336]: pop @3
[02447:05338]: pop @2
[02448:05340]: ret
####################
[02449:05341]: push @2
[02450:05343]: add @2, 2457, 1       # @2 = 2458
[02451:05347]: rmem @2, @2           # @2 = [2458]
[02452:05350]: add @2, @2, @0        # @2 = @2 + 27095
[02453:05354]: wmem @2, 95           # [@2] = 95
[02454:05357]: pop @2                # restore @2
[02455:05359]: ret                   # return
####################
[02731:06027]: jt @0, 6035
[02732:06030]: add @0, @1, 1
[02733:06034]: ret
####################
# F1841
#
# 1. Loops from [@3] till the value at [@3 + @6] is greater than the value stored at [6125]. Storing each value
#    at [@3 + @6] to [6126 + @6].
# 2. [6126] = (@6 * 5249) + 12345
#
# PARAM @3: One before memory address to read
#
####################
[00818:01841]: push @3
[00819:01843]: push @4
[00820:01845]: push @5
[00821:01847]: push @6
[00822:01849]: set @6, 1
[00823:01852]: add @4, @3, @6      # add @3 + 1
[00824:01856]: rmem @4, @4         # read from @4 (@3 + 1)
[00825:01859]: add @5, 6125, @6    # set @5 = 6126
[00826:01863]: wmem @5, @4         # write to [6126]
[00827:01866]: add @6, @6, 1       # increment @6 by 1
[00828:01870]: rmem @5, 6125       # read from 6125
[00829:01873]: gt @4, @6, @5
[00830:01877]: jf @4, 1852
[00831:01880]: set @3, 0
[00832:01883]: set @4, 0
[00833:01886]: rmem @5, 6125       # read from 6125
[00834:01889]: mod @5, @4, @5      # set @5 to 0
[00835:01893]: add @5, @5, 6125    # set @5 to 6125
[00836:01897]: add @5, @5, 1       # @5 = 6126
[00837:01901]: rmem @6, @5         # read from [6126]
[00838:01904]: mult @6, @6, 5249   # @6 = multiply the incremented value by 5249
[00839:01908]: add @6, @6, 12345   # @6 = @6 + 12345
[00840:01912]: wmem @5, @6         # write to [6126] = (@6 * 5249) + 12345
[00841:01915]: push @0             # push @0 onto the stack
[00842:01917]: push @1
[00843:01919]: set @1, @6          # @1 = (@6 * 5249) + 12345
[00844:01922]: call 2125
[00845:01924]: set @6, @0
[00846:01927]: pop @1
[00847:01929]: pop @0
[00848:01931]: rmem @5, @1
[00849:01934]: mod @6, @6, @5
[00850:01938]: add @6, @6, 1
[00851:01942]: gt @5, @6, @2
[00852:01946]: jt @5, 1952
[00853:01949]: set @3, 1
[00854:01952]: add @6, @6, @1
[00855:01956]: rmem @6, @6
[00856:01959]: add @4, @4, 1
[00857:01963]: add @5, @4, 6129
[00858:01967]: wmem @5, @6
[00859:01970]: rmem @5, 6129
[00860:01973]: eq @5, @4, @5
[00861:01977]: jf @5, 1886
[00862:01980]: jf @3, 1880
[00863:01983]: push @0
[00864:01985]: set @0, 6129
[00865:01988]: call 1518
[00866:01990]: pop @0
[00867:01992]: pop @6
[00868:01994]: pop @5
[00869:01996]: pop @4
[00870:01998]: pop @3
[00871:02000]: ret
####################
# F1518
#
# RETURN @0, @2, @3, @4, @5, @6, @7
####################
[00687:01518]: push @1
[00688:01520]: set @1, 1528
[00689:01523]: call 1458
[00690:01525]: pop @1
[00691:01527]: ret
####################
# F5814
#
# Prints out "- %s\n"
#
# RETURN @0, @1, @2, @3, @4, @5, @6, @7
####################
[02647:05814]: out 45         # print '-'
[02648:05816]: out 32         # print space
[02649:05818]: call 1518
[02650:05820]: out 10         # print new line
[02651:05822]: ret
####################
# F1543
#
# If the value stored at [@0] is false it calls [1458] if the result of that is 1 it jumps to [1563]
# PARAM @0: Memory address to read from
#
# RETURN @0, @2, @4, @5, @6, @7
# @0 = 32767
# @2 ???
# @4 ???
# @5 ???
# @6 ???
# @7 ???
####################
[00700:01543]: push @1
[00701:01545]: push @3
[00702:01547]: rmem @3, @0    # read from @0
[00703:01550]: jf @3, 1563    # if [@0] is false jump to [1563]
[00704:01553]: call 1458      # call [1458]
[00705:01555]: jt @1, 1563
[00706:01558]: set @0, @2
[00707:01561]: jmp 1566       # jump to [1566]
[00708:01563]: set @0, 32767
[00709:01566]: pop @3
[00710:01568]: pop @1
[00711:01570]: ret
####################
# F1667
#
# Reads from the memory address @0 and @1 checks if they're equal, if they're not jumps to [1711]. If they are equal
# it checks if the values are both equal to 0 if they're not both memory addresses are passed to F1619(@0, @1)
#
# PARAM @0 Memory Address 1
# PARAM @1 Memory Address 2
#
# RETURN: @0, @5, @6, @7
# @0 = 0
# @5 ???
# @6 ???
# @7 ???
####################
[00751:01667]: push @1
[00752:01669]: push @2
[00753:01671]: push @3
[00754:01673]: push @4
[00755:01675]: rmem @3, @0    # read from @0
[00756:01678]: rmem @4, @1    # read from @1
[00757:01681]: eq @2, @3, @4  # check if the values are equal
[00758:01685]: jf @2, 1711    # if they're not jump to [1711]
[00759:01688]: or @2, @3, @4
[00760:01692]: jf @2, 1706    # using the OR trick to check that @3 and @4 are not 0
[00761:01695]: set @2, @1     # save the @1 memory address to @2
[00762:01698]: set @1, 1619   # save [1619] to @1 -- why?
[00763:01701]: call 1458      #
[00764:01703]: jf @1, 1711    # if the call to 1458 leaves @1 as 0 jump to [1711]
[00765:01706]: set @0, 1      #
[00766:01709]: jmp 1714
[00767:01711]: set @0, 0
[00768:01714]: pop @4
[00769:01716]: pop @3
[00770:01718]: pop @2
[00771:01720]: pop @1
[00772:01722]: ret
####################
# If @0 is TRUE jump to 6035 otherwise set @0 to @1 + 1 and return
####################
[02731:06027]: jt @0, 6035
[02732:06030]: add @0, @1, 1
[02733:06034]: ret
####################
# F1619
#
# Takes in value @1 and @2 reads from memory address @2 + @1 + 1 and if that is equal to @3
#
# PARAM @0: Value to compare [@2 + @1 + 1] to.
# PARAM @1:
# PARAM @2:
#
# RETURN: @0, @1, @2, @4, @5, @6, @7
# @0 = PARAM @0
# @1 = If [@2 + @1 + 1] != @0: 32767 ELSE: PARAM @1
# @2 = IF [@2 + @1 + 1] != @0: PARAM @1 ELSE: PARAM @2
####################
[00733:01619]: push @3
[00734:01621]: add @3, @2, 1         # @3 = @2 + 1
[00735:01625]: add @3, @3, @1        # @3 = @3 + @1
[00736:01629]: rmem @3, @3           # @3 = [@2 + @1 + 1]
[00737:01632]: eq @3, @0, @3         # @3 = @0 == [@2 + @1 + 1]
[00738:01636]: jt @3, 1645           # success?
[00739:01639]: set @2, @1            # set @2 equal to PARAM @1
[00740:01642]: set @1, 32767         # NULL out @1??? (similar to -1 I think)
[00741:01645]: pop @3
[00742:01647]: ret